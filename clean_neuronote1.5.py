from PyQt6.QtWidgets import QApplication, QDialog, QVBoxLayout, QTableWidget, QTableWidgetItem, QPushButton, QLabel, QTextEdit, QCheckBox, QComboBox, QHBoxLayout, QWidget, QHeaderView, QSizePolicy, QSpacerItem, QMessageBox, QApplication
from PyQt6.QtGui import QColor, QPalette
from PyQt6.QtCore import Qt, QSignalBlocker, QPropertyAnimation, QEasingCurve
import sqlite3
import datetime
import requests
import json
import os

config_path = "config.json"


class TaskManager(QDialog):
    def __init__(self):
        super().__init__()

        dark_palette = QPalette()
        dark_palette.setColor(QPalette.ColorRole.Window, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.WindowText, QColor(255, 255, 255))
        dark_palette.setColor(QPalette.ColorRole.Base, QColor(25, 25, 25))
        dark_palette.setColor(QPalette.ColorRole.Base, QColor(44, 47, 51))  # –°–µ—Ä—ã–π —Ñ–æ–Ω –≤–º–µ—Å—Ç–æ —á–µ—Ä–Ω–æ–≥–æ
        dark_palette.setColor(QPalette.ColorRole.Text, QColor(255, 255, 255))  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
        dark_palette.setColor(QPalette.ColorRole.Highlight, QColor(28, 28, 28))  # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        dark_palette.setColor(QPalette.ColorRole.PlaceholderText, QColor(176, 176, 176))



        dark_palette.setColor(QPalette.ColorRole.AlternateBase, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(255, 255, 255))
        dark_palette.setColor(QPalette.ColorRole.ToolTipText, QColor(255, 255, 255))
        dark_palette.setColor(QPalette.ColorRole.Text, QColor(255, 255, 255))
        dark_palette.setColor(QPalette.ColorRole.Button, QColor(53, 53, 53))
        dark_palette.setColor(QPalette.ColorRole.ButtonText, QColor(255, 255, 255))
        dark_palette.setColor(QPalette.ColorRole.BrightText, QColor(255, 0, 0))
        dark_palette.setColor(QPalette.ColorRole.Link, QColor(42, 130, 218))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
        app = QApplication.instance()
        app.setPalette(dark_palette)

        QApplication.setStyle("Fusion")  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        self.setWindowTitle("NeuroNote")
        self.setMinimumWidth(400)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞
        self.setMaximumWidth(400)
        self.setMinimumHeight(425)
        self.setMaximumHeight(425)


        screen = QApplication.primaryScreen().geometry()
        screen_center_x = screen.width() // 2
        screen_center_y = screen.height() // 2

        


        # –†–∞–∑–º–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        window_width = 500
        window_height = 350

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–∫–Ω–æ –±—ã–ª–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        self.setGeometry(
            screen_center_x - window_width // 2, 
            screen_center_y - window_height // 2, 
            window_width, 
            window_height
        )


        layout = QVBoxLayout()

        def fade_in_animation(self, widget):
                anim = QPropertyAnimation(widget, b"windowOpacity")
                anim.setDuration(300)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                anim.setStartValue(0)
                anim.setEndValue(1)
                anim.setEasingCurve(QEasingCurve.Type.InOutQuad)
                anim.start()
                widget.show()

        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.category_dropdown = QComboBox()
        self.category_dropdown.addItems(["üéÆGames", "üé•Video", "üõë YouTube", "üîóLink", "üìùNote", "üìåTask"])
        layout.addWidget(QLabel("Choose Category:"))
        layout.addWidget(self.category_dropdown)


        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–º–µ—Ç–∫–∏
        self.note_input = QTextEdit()
        self.note_input.setPlaceholderText("Write here...")
        layout.addWidget(self.note_input)
        self.note_input.setStyleSheet("border: 1px solid #72767D; background-color: #2C2F33; color: white;")

        self.note_input.setStyleSheet("""
            border: 1px solid #72767D;
            background-color: #2C2F33;
            color: white;
            selection-background-color: #7289DA;
            border-radius: 5px;
        """)

        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –ª–æ–≥–æ–≤ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π
        self.log_window = QTextEdit()
        self.log_window.setReadOnly(True)  # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è

        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å
        self.log_window.setStyleSheet("""
            border: 1px solid #72767D;
            background-color: #2C2F33;
            color: white;
            selection-background-color: #7289DA;
            border-radius: 5px;
        """)




        # –í—ã–±–æ—Ä —Ç–µ–≥–æ–≤ (–∫–Ω–æ–ø–∫–∏)
        self.tags = {
            "Important": "red",
            "Work": "green",
            "Personal": "yellow",
            "Urgent": "orange",
            "Info": "blue",
            "Success": "lime",
            "Warning": "purple",
            "Error": "gold"
        }

        self.webhooks = {
            "Games": "INSERT_YOUR_WEBHOOK_HERE",
            "Link": "INSERT_YOUR_WEBHOOK_HERE",
            "YouTube": "INSERT_YOUR_WEBHOOK_HERE",
            "Video": "INSERT_YOUR_WEBHOOK_HERE",
            "Note": "INSERT_YOUR_WEBHOOK_HERE",
            "Task": "INSERT_YOUR_WEBHOOK_HERE"
        }




        layout.addWidget(QLabel("Choose a tag (max. 3):"))

        self.selected_tags = set()
        self.tag_buttons = {}

        tag_layout = QHBoxLayout()
        tag_layout.setSpacing(0)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10+)
        tag_layout.setContentsMargins(0, 5, 0, 5)

        for tag, color in self.tags.items():
            btn = QPushButton()
            btn.setFixedSize(20,20)
            btn.setStyleSheet(f"background-color: {color}; border-radius: 5px;")
            btn.setCheckable(True)
            btn.clicked.connect(lambda checked, t=tag: self.toggle_tag(t, checked))
            self.tag_buttons[tag] = btn
            tag_layout.addWidget(btn)

        tag_widget = QWidget()
        tag_widget.setLayout(tag_layout)
        tag_widget.setSizePolicy(QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Fixed)
        layout.addWidget(tag_widget)

        # –ß–µ–∫–±–æ–∫—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord
        self.send_to_discord = QCheckBox("Send to Discord")
        layout.addWidget(self.send_to_discord)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_button = QPushButton("Save")
        self.save_button.clicked.connect(self.save_note)
        layout.addWidget(self.save_button)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Saved Notes –∏ –æ—á–∏—Å—Ç–∫–∏
        self.saved_notes_button = QPushButton("SavedNotes")
        self.saved_notes_button.clicked.connect(self.show_saved_notes)
        layout.addWidget(self.saved_notes_button)

        self.clear_button = QPushButton("Clear")
        self.clear_button.clicked.connect(self.clear_notes)
        layout.addWidget(self.clear_button)

        button_style = """
            QPushButton {
                border: 1px solid #4E5D94;
                background-color: #424549;
                color: white;
                border-radius: 4px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #5865F2;
            }
            QPushButton:pressed {
                background-color: #3C45A5;
            }
        """
        self.save_button.setStyleSheet(button_style)
        self.clear_button.setStyleSheet(button_style)
        self.saved_notes_button.setStyleSheet(button_style)

        # –û–∫–Ω–æ –ª–æ–≥–æ–≤
        layout.addItem(QSpacerItem(10, 20, QSizePolicy.Policy.Minimum, QSizePolicy.Policy.Expanding))
        layout.addWidget(QLabel("Logs:"))  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–æ–≥–æ–≤
        self.log_window = QTextEdit()
        self.log_window.setReadOnly(True)  # –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.log_window.setFixedHeight(70)  # –í—ã—Å–æ—Ç–∞ –ª–æ–≥–æ–≤
        self.log_window.setStyleSheet("border: 1px solid #72767D; background-color: #2C2F33; color: white;")

        layout.addWidget(self.log_window)

        

        self.setLayout(layout)
        self.initDB()




    def initDB(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.conn = sqlite3.connect("tasks_notes.db")
        self.cursor = self.conn.cursor()
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS notes (
                id INTEGER PRIMARY KEY,
                category TEXT,
                content TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                tags TEXT
            )
        """)
        self.conn.commit()

    def toggle_tag(self, selected_tag, checked):
        """–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–µ–≥ –∑–∞ —Ä–∞–∑)"""
        if checked:
            # **–°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Ç–µ–≥–∏**
            for tag, btn in self.tag_buttons.items():
                if tag != selected_tag:
                    with QSignalBlocker(btn):  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–π
                        btn.setChecked(False)
                        btn.setStyleSheet(f"background-color: {self.tags[tag]}; border-radius: 5px;")

            # **–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–≥ –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º**
            self.selected_tags = {selected_tag}
            self.tag_buttons[selected_tag].setChecked(True)
            self.tag_buttons[selected_tag].setStyleSheet(
                f"background-color: {self.tags[selected_tag]}; border: 2px solid black; border-radius: 5px;"
            )
        else:
            # **–ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –µ—â—ë —Ä–∞–∑ –ø–æ —Ç–æ–º—É –∂–µ —Ç–µ–≥—É ‚Äì —É–±–∏—Ä–∞–µ–º –µ–≥–æ**
            self.selected_tags.clear()
            self.tag_buttons[selected_tag].setStyleSheet(f"background-color: {self.tags[selected_tag]}; border-radius: 5px;")



    def save_note(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        for tag, btn in self.tag_buttons.items():
            print(f"–¢–µ–≥: {tag}, Checked: {btn.isChecked()}, Enabled: {btn.isEnabled()}")

        category = self.category_dropdown.currentText()
        content = self.note_input.toPlainText().strip()

        self.category_dropdown.setStyleSheet("""
            QComboBox {
                background-color: #23272A;
                border: 1px solid #72767D;
                color: white;
                padding: 4px;
                border-radius: 4px;
            }
            QComboBox:hover {
                background-color: #2C2F33;
            }
            QComboBox QAbstractItemView {
                background-color: #2C2F33;
                selection-background-color: #5865F2;
                color: white;
            }
        """)


        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
        selected_tag = next((tag for tag, btn in self.tag_buttons.items() if btn.isChecked()), None)


        if content:
            self.cursor.execute("INSERT INTO notes (category, content, date, tags) VALUES (?, ?, ?, ?)", 
                                (category, content, datetime.datetime.now(), selected_tag if selected_tag else "–±–µ–∑ —Ç–µ–≥–∞"))

            self.conn.commit()
            self.note_input.clear()

            # **–õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏**
            emoji = self.webhooks.get(category, ("", ""))[1]  # –ë–µ—Ä—ë–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            #tag_display = ", ".join(selected_tag) if selected_tag else "–±–µ–∑ —Ç–µ–≥–æ–≤"
            self.log_message(f"‚úÖ {emoji} Note saved in **[{category}]**")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–≥–æ–≤
            for tag, btn in self.tag_buttons.items():
                btn.setChecked(False)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                btn.setEnabled(True)   # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                btn.repaint()          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                btn.clearFocus()       # –£–±–∏—Ä–∞–µ–º —Ñ–æ–∫—É—Å —Å –∫–Ω–æ–ø–∫–∏






            # **–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord**
            if self.send_to_discord.isChecked():
                self.send_to_discord_webhook(category, content, selected_tag)


    def save_to_json():
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
        db_path = "–Ω–∞–∑–≤–∞–Ω–∏–µ_—Ñ–∞–π–ª–∞.db"  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É —Ñ–∞–π–ª—É
        json_path = "neuronote_data.json"  # –ò–º—è JSON —Ñ–∞–π–ª–∞

        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ (–∑–∞–º–µ–Ω–∏ notes –Ω–∞ —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—É)
        cursor.execute("SELECT * FROM notes;")  
        rows = cursor.fetchall()

        # –°–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –∫–æ–ª–æ–Ω–æ–∫)
        columns = ["id", "content", "date", "tags", "category"]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        data = [dict(zip(columns, row)) for row in rows]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open(json_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)

        conn.close()
        print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_path}")







    # def send_to_discord_webhook(self, category, content):
    #     """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord (–∑–∞–º–µ–Ω–∏ –Ω–∞ Webhook)"""
    #     print(f"[DISCORD] –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª: {category}, –ö–æ–Ω—Ç–µ–Ω—Ç: {content}")

    def show_saved_notes(self):
        
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ –∑–∞–º–µ—Ç–∫–∞–º–∏"""
        dialog = QDialog(self)
        dialog.setWindowTitle("Saved Notes")
        dialog.setFixedSize(750, 400)  # –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ

        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ Saved Notes
        saved_width = 600
        saved_height = 400

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        main_x = self.x()
        main_y = self.y()
        main_width = self.width()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Saved Notes —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞, —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
        dialog.setGeometry(
            main_x + main_width + 10,  # 10 –ø–∏–∫—Å–µ–ª–µ–π –æ—Ç—Å—Ç—É–ø
            main_y,  # –í—ã—Å–æ—Ç–∞ –∫–∞–∫ —É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            saved_width,
            saved_height
        )


        layout = QVBoxLayout()
        table_widget = QTableWidget()
        table_widget.setColumnCount(4)  # –î–æ–±–∞–≤–ª—è–µ–º 4-–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        table_widget.setHorizontalHeaderLabels(["Note", "Date", "Tag", "Category"])

        self.cursor.execute("SELECT category, content, date, tags FROM notes ORDER BY date DESC")
        notes = self.cursor.fetchall()
        table_widget.setRowCount(len(notes))

        for row, note in enumerate(notes):
            local_time = datetime.datetime.strptime(note[2], "%Y-%m-%d %H:%M:%S.%f").strftime("%Y-%m-%d %H:%M:%S")
            category = note[0]  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
            note_text = note[1]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
            tags = note[3] if note[3] else ""

            table_widget.setItem(row, 0, QTableWidgetItem(note_text))  # –¢–æ–ª—å–∫–æ –∑–∞–º–µ—Ç–∫–∞
            table_widget.setItem(row, 1, QTableWidgetItem(local_time))  # –î–∞—Ç–∞
            table_widget.setItem(row, 3, QTableWidgetItem(category))  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏
            tag_list = tags.split(",") if tags else []
            color_widget = QWidget()
            color_layout = QHBoxLayout()
            color_layout.setContentsMargins(0, 0, 0, 0)

            for tag in tag_list:
                tag_color = self.tags.get(tag, "silver")
                tag_label = QLabel()
                tag_label.setFixedSize(15, 15)
                tag_label.setStyleSheet(f"background-color: {tag_color}; border-radius: 3px;")
                color_layout.addWidget(tag_label)

            color_widget.setLayout(color_layout)
            table_widget.setCellWidget(row, 2, color_widget)  # –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω—ã–µ —Ç–µ–≥–∏

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        table_widget.setColumnWidth(0, 350)  # –ó–∞–º–µ—Ç–∫–∞
        table_widget.setColumnWidth(1, 120)  # –î–∞—Ç–∞
        table_widget.setColumnWidth(2, 100)  # –¢–µ–≥–∏
        table_widget.setColumnWidth(3, 100)  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è

        table_widget.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        table_widget.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Fixed)

        layout.addWidget(table_widget)
        dialog.setLayout(layout)
        dialog.exec()


    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ –æ–∫–Ω–æ –ª–æ–≥–æ–≤"""
        self.log_window.append(message)



    def clear_notes(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
        self.cursor.execute("DELETE FROM notes")
        self.conn.commit()
        self.log_message("‚ö†Ô∏è –í—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")




    def clear_notes(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        reply = QMessageBox.question(self, "Confirmation", "Are you sure to delete all notes?",
                                    QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No, 
                                    QMessageBox.StandardButton.No)

        if reply == QMessageBox.StandardButton.Yes:
            self.cursor.execute("SELECT COUNT(*) FROM notes")
            count = self.cursor.fetchone()[0]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫

            self.cursor.execute("DELETE FROM notes")
            self.conn.commit()

            self.log_message(f"‚ö†Ô∏è üóë Deleted {count} notes.")



    def send_to_discord_webhook(self, category, content, tags):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª Discord —Å —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏"""
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º –≤–µ–±—Ö—É–∫–∞
        clean_category = category
        for emoji in self.webhooks.values():
            clean_category = clean_category.replace(emoji[1], "").strip()

        
        webhook_data = self.webhooks.get(clean_category)

        if not webhook_data:
            self.log_message(f"‚ö†Ô∏è Webhook **{clean_category}** is not found!")
            return

        webhook_url, emoji = webhook_data  # –†–∞–∑–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ç–µ–∂

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "Video" -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ embed
        if clean_category == "Video":
            data = {"content": f"{emoji} **[{clean_category}]** {content}"}
        else:
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç Embed-–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–≥–æ–≤
            tag_colors = {
                "Important": 0xFF0000,  # –ö—Ä–∞—Å–Ω—ã–π
                "Work": 0x008000,  # –ó–µ–ª—ë–Ω—ã–π
                "Personal": 0xFFFF00,  # –ñ—ë–ª—Ç—ã–π
                "Urgent": 0xFFA500,  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                "Info": 0x0000FF,  # –°–∏–Ω–∏–π
                "Success": 0x32CD32,  # –õ–∞–π–º–æ–≤—ã–π
                "Warning": 0x800080,  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                "Error": 0xFFD700  # –ó–æ–ª–æ—Ç–æ–π
            }

            color = tag_colors.get(tags, 0xFFFFFF)  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            embed = {
                "title": f"{emoji} **{clean_category}**",
                "description": content,
                "color": color
            }

            data = {"embeds": [embed]}

        response = requests.post(webhook_url, json=data)

        if response.status_code == 204:
            self.log_message(f"{emoji} üì© Message sent to Discord")
        else:
            self.log_message(f"‚ùå Couldn't send to Discord **({clean_category})**: {response.status_code}")



if __name__ == "__main__":
    app = QApplication([])
    window = TaskManager()
    window.show()
    app.exec()